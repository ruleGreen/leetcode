Questions.

Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Your KthLargest class will have a constructor which accepts an integer k and an integer array nums, which contains initial elements from the stream. For each call to the method KthLargest.add, return the element representing the kth largest element in the stream.

Solutions.

1.

import math

class KthLargest(object):

    def __init__(self, k, nums):
        """
        :type k: int
        :type nums: List[int]
        """
        nums = self.mergesort(nums)  # nums.sort(reverse=True)
        self.nums = nums[0:k]
        self.k = k
    
    def mergesort(self,seq):
        if len(seq) <= 1:
            return seq
        mid = math.ceil(len(seq) / 2)  # 将列表分成更小的两个列表
        # 分别对左右两个列表进行处理，分别返回两个排序好的列表
        left = self.mergesort(seq[:mid])
        right = self.mergesort(seq[mid:])
        # 对排序好的两个列表合并，产生一个新的排序好的列表
        return self.merge(left, right)

    def merge(self,left, right):
        """合并两个已排序好的列表，产生一个新的已排序好的列表"""
        result = []  # 新的已排序好的列表
        i = 0  # 下标
        j = 0
        # 对两个列表中的元素 两两对比。
        # 将最小的元素，放到result中，并对当前列表下标加1
        while i < len(left) and j < len(right):
            if left[i] >= right[j]:
                result.append(left[i])
                i += 1
            else:
                result.append(right[j])
                j += 1
        result += left[i:]
        result += right[j:]
        return result

    def add(self, val):
        """
        :type val: int
        :rtype: int
        """
        if len(self.nums) < self.k:
            self.nums.append(val)
        for i in range(0,len(self.nums)):
            if val > self.nums[i]:
                for j in reversed(range(i,len(self.nums)-1)):
                    self.nums[j+1] = self.nums[j]
                self.nums[i] = val
                break
        return self.nums[-1]
        


# Your KthLargest object will be instantiated and called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)


class KthLargest:

    def __init__(self, k, nums):
        self.k = k
        self.nums = nums
        self.nums.sort()                # O(nlogn)
    
    import bisect
    def add(self, val):
        bisect.insort(self.nums, val)   # O(logn)
        l = len(self.nums) # length of nums
        k = self.k         
        return self.nums[l-k] if l > k else self.nums[0]
        
        


# Your KthLargest object will be instantiated and called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)
