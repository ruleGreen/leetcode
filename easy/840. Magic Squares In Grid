class Solution:
    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:
        # (i,j) -> (i+2,j+2)
        res = 0
        for i in range(len(grid)-2):
            for j in range(len(grid[0])-2):
                if sum(grid[i][j:j+3]) == sum(grid[i+1][j:j+3]) and sum(grid[i][j:j+3]) == sum(grid[i+2][j:j+3]):
                    if sum(grid[i][j:j+3]) == grid[i][j] + grid[i+1][j+1] + grid[i+2][j+2] and grid[i][j] + grid[i+1][j] + grid[i+2][j] == grid[i][j+1] + grid[i+1][j+1] + grid[i+2][j+1] and grid[i][j] + grid[i+1][j] + grid[i+2][j] == grid[i][j+2] + grid[i+1][j+2] + grid[i+2][j+2]:
                        if sum(grid[i][j:j+3]) == grid[i][j] + grid[i+1][j] + grid[i+2][j]:
                            newgrid = [grid[i][j],grid[i][j+1],grid[i][j+2],grid[i+1][j],grid[i+1][j+1],grid[i+1][j+2],grid[i+2][j],grid[i+2][j+1],grid[i+2][j+2]]
                            newgrid = sorted(newgrid)
                            if newgrid == [1,2,3,4,5,6,7,8,9]:
                                res += 1
        return res
