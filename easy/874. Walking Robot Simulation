1. methond one

brute force

class Solution(object):
    def robotSim(self, commands, obstacles):
        """
        :type commands: List[int]
        :type obstacles: List[List[int]]
        :rtype: int
        """
        # 0 1 2 3 up down left right
        direction, i = 0, 0
        dx, dy = 0, 0
        res = float("-Inf")
        while i < len(commands):
            if commands[i] > 0:
                j = 0
                while j < commands[i]:
                    old_dx, old_dy = dx, dy
                    if direction == 0:
                        dy += 1
                    elif direction == 1:
                        dy -= 1
                    elif direction == 2:
                        dx -= 1
                    elif direction == 3:
                        dx += 1
                    if [dx,dy] in obstacles:
                        dx, dy = old_dx, old_dy
                        break
                    j += 1
            elif commands[i] == -1:
                if direction == 0:
                    direction = 3
                elif direction == 1:
                    direction = 2
                elif direction == 2:
                    direction = 0
                elif direction == 3:
                    direction = 1
            elif commands[i] == -2:
                if direction == 0:
                    direction = 2
                elif direction == 1:
                    direction = 3
                elif direction == 2:
                    direction = 1
                elif direction == 3:
                    direction = 0
            i += 1
            res = max(res, (dx-0)**2 + (dy-0)**2)
        return res
        
 2. method two
 
 class Solution(object):
    def robotSim(self, commands, obstacles):
        dx = [0, 1, 0, -1]
        dy = [1, 0, -1, 0]
        x = y = di = 0
        obstacleSet = set(map(tuple, obstacles))
        ans = 0

        for cmd in commands:
            if cmd == -2:  #left
                di = (di - 1) % 4
            elif cmd == -1:  #right
                di = (di + 1) % 4
            else:
                for k in xrange(cmd):
                    if (x+dx[di], y+dy[di]) not in obstacleSet:
                        x += dx[di]
                        y += dy[di]
                        ans = max(ans, x*x + y*y)

        return ans
