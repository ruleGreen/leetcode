class Solution:
    def imageSmoother(self, M: List[List[int]]) -> List[List[int]]:
        import math
        res = [ [0 for j in range(len(M[0]))] for i in range(len(M)) ]
        print(res)
        for i in range(len(M)):
            for j in range(len(M[0])):
                count = 0
                sum_0,sum_1,sum_2,sum_3,sum_4,sum_5,sum_6,sum_7,sum_8=0,0,0,0,0,0,0,0,0
                # (i-1,j-1) (i-1,j) (i-1,j+1) 
                # (i,j-1) (i,j) (i,j+1)
                # (i+1,j-1) (i+1,j) (i+1,j+1)
                if i-1>=0 and i-1<=len(M)-1:
                    if j-1>=0 and j-1<=len(M[0])-1:
                        count += 1
                        sum_0 = M[i-1][j-1]
                    if j>=0 and j<=len(M[0])-1:
                        count += 1
                        sum_1 = M[i-1][j]
                    if j+1>=0 and j+1<=len(M[0])-1:
                        count += 1
                        sum_2 = M[i-1][j+1]
                if i>=0 and i<=len(M)-1:
                    if j-1>=0 and j-1<=len(M[0])-1:
                        count += 1
                        sum_3 = M[i][j-1]
                    if j>=0 and j<=len(M[0])-1:
                        count += 1
                        sum_4 = M[i][j]
                    if j+1>=0 and j+1<=len(M[0])-1:
                        count += 1
                        sum_5 = M[i][j+1]
                if i+1>=0 and i+1<=len(M)-1:
                    if j-1>=0 and j-1<=len(M[0])-1:
                        count += 1
                        sum_6 = M[i+1][j-1]
                    if j>=0 and j<=len(M[0])-1:
                        count += 1
                        sum_7 = M[i+1][j]
                    if j+1>=0 and j+1<=len(M[0])-1:
                        count += 1
                        sum_8 = M[i+1][j+1]
                #print(sum_0,sum_1,sum_2,sum_3,sum_4,sum_5,sum_6,sum_7)
                #print(count)
                res[i][j] = math.floor((sum_0+sum_1+sum_2+sum_3+sum_4+sum_5+sum_6+sum_7+sum_8) / count)
        
        return res
        
