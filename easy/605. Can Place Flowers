class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        if len(flowerbed) < 3:
            if 1 in flowerbed:
                return 0 >= n
            else:
                return 1 >= n
        
        if len(flowerbed) == 3:
            # [0,0,0] [0,0,1] [*,1,*],[1,0,0]
            if flowerbed[1] == 0:
                if flowerbed[0] == 0 and flowerbed[2] == 0:
                    return 2 >= n
                elif flowerbed[0] == 0 or flowerbed[2] == 0:
                    return 1 >= n
                else:
                    return 0 >= n
            else:
                return 0 >= n
            
        max_num = 0
        for i in range(len(flowerbed) - 2):
            if i == 0:
                # [0,0,1,.....]
                # [0,0,0,0,1,.]
                if flowerbed[i] == 0 and flowerbed[i+1] == 0:
                    if flowerbed[i+2] == 1:
                        max_num += 1
                        flowerbed[i] = 1
                    elif flowerbed[i+2] == 0 and flowerbed[i+3] == 0:
                        max_num += 2
                        flowerbed[i] = flowerbed[i+2] = 1
                    
            if i == len(flowerbed) - 3:
                # [....,1,0,0]
                # [.....,1,0,0,0,0]
                if flowerbed[i] == 1 and flowerbed[i+1] == 0 and flowerbed[i+2] == 0:
                    max_num += 1
                    flowerbed[i+1] = 1
            if flowerbed[i] == 0 and flowerbed[i+1] == 0 and flowerbed[i+2] ==0:
                max_num += 1
                flowerbed[i+1] = 1
                
        return max_num >= n
                
