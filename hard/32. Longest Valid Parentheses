class Solution:
    def longestValidParentheses(self, s: str) -> int:
        dp, stack = [0]*(len(s) + 1), []
        for i in range(len(s)):
            if s[i] == '(':
                stack.append(i)
            else:
                if stack:
                    p = stack.pop()
                    dp[i + 1] = dp[p] + i - p + 1
        return max(dp)


class Solution:
    def longestValidParentheses(self, s: str) -> int:
        l=len(s)
        S = "-"*l
        Slist = list(S)
        stack = []
        out = 0
        for i in range(l):
            if s[i] == "(":
                stack.append(i)
            else :
                if stack !=[]:
                    Slist[stack[-1]] = '1'
                    Slist[i] = '1'
                    stack.pop(-1)
        S = "".join(Slist)
        b = S.split("-")
        for i in b:
            if len(i)>out:
                out = len(i)
        return out
