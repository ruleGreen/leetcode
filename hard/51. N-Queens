Solutions:

1.

class Solution:
    def solveNQueens(self, n):
        """
        :type n: int
        :rtype: List[List[str]]
        """
        if n <1: return []
        self.result = []
        self.cols = set(); self.pie = set(); self.na = set()
        self.DFS(n, 0, [])
        return self.generate_result(n)
    
    def DFS(self, n, row, cur_state):
        # recursion terminator
        if row >=n:
            self.result.append(cur_state)
            return
        
        for col in range(n):
            if col in self.cols or row + col in self.pie or row - col in self.na:
                # go die
                continue
            
            # update the flag
            self.cols.add(col)
            self.pie.add(row + col)
            self.na.add(row - col)
            
            self.DFS(n, row + 1, cur_state + [col])
            
            self.cols.remove(col)
            self.pie.remove(row + col)
            self.na.remove(row - col)
            
    def generate_result(self, n):
        board = []
        for res in self.result:
            for i in res:
                board.append("." * i + "Q" + "." * (n-i-1))
                
        return [board[i:i + n] for i in range(0, len(board), n)]
        
2.

class Solution:
    def solveNQueens(self, n):
        """
        :type n: int
        :rtype: List[List[str]]
        """
        def DFS(queens, xy_dif, xy_sum):
            p = len(queens)
            if p == n:
                result.append(queens)
                return None
            for q in range(n):
                if q not in queens and p - q not in xy_dif and p + q not in xy_sum:
                    DFS(queens + [q], xy_dif + [p - q], xy_sum + [p + q])
        result = []
        DFS([], [], [])
        return [ ["." * i + "Q" + "." * (n-i-1) for i in sol] for sol in result ]
        
 3.
 
 class Solution {
private:
    vector<vector<string>> res;
    vector<bool> col, dia1, dia2;
    
    vector<string> generateBoard(int n, vector<int> & row){
        assert(row.size() == n);
        vector<string> board(n, string(n, '.'));
        for(int i = 0; i < n; i++)
            board[i][row[i]] = 'Q';
        return board;
    }
    
    // 尝试在一个n皇后问题中，摆放第index行的皇后位置
    void putQueen(int n, int index, vector<int> &row){
        if( index == n){
            res.push_back( generateBoard(n, row));
            return;
        }
        
        for( int i = 0; i < n; i++)
            //尝试在第index行的皇后摆放在第i列
            if ( !col[i] && !dia1[index+i] && !dia2[index-i+n-1] ){
                row.push_back(i);
                col[i] = true;
                dia1[index+i] = true;
                dia2[index-i+n-1] = true;
                putQueen(n, index+1, row);
                col[i] = false;
                dia1[index+i] = false;
                dia2[index-i+n-1] = false;
                row.pop_back();
            }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        res.clear();
        
        col = vector<bool>(n, false);
        dia1 = vector<bool>(2*n-1, false);
        dia2 = vector<bool>(2*n-1, false);
        
        vector<int> row;
        putQueen(n, 0, row);
        
        return res;
    }
};
