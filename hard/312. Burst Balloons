1. method one: backtracking

class Solution:
    
    def __init__(self):
        self.memo = {}
        
    def maxCoins(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]
        if len(nums) == 0:
            return 0
        
        if str(nums) in self.memo:
            return self.memo[str(nums)]
        
        res = float("-inf")
        for i in range(0, len(nums)):
            if i == 0:
                coins = 1 * nums[i] * nums[i + 1]
                # self.maxCoins()
            elif i == len(nums) - 1:
                coins = nums[i - 1] * nums[i] * 1
            else:
                coins = nums[i-1] * nums[i] * nums[i + 1]
            
            value = nums[i]
            nums.pop(i)
            choice = self.maxCoins(nums)
            self.memo[str(nums)] = choice
            if res < choice + coins:
                res = choice + coins
            nums.insert(i, value)
            
        return res
                

class Solution:
    def maxCoins(self, iNums):
        nums = [1] + [i for i in iNums if i > 0] + [1]
        n = len(nums)
        dp = [ [0]*n for _ in range(n) ]

        for k in range(2, n):
            for left in range(0, n - k):
                right = left + k
                for i in range(left + 1,right):
                    dp[left][right] = max(dp[left][right], nums[left] * nums[i] * nums[right] + dp[left][i] + dp[i][right])
        return dp[0][n - 1]
                
        
