class Solution:
    def __init__(self):
        self.valid_expressions = None
        self.min_removed = None
    
    def reset(self):
        self.valid_expressions = set()
        self.min_removed = float("inf")
        
    """
        string: The original string we are recursing on.
        index: current index in the original stringh.
        left: number of left parenthesis till now.
        right number of right parenthesis till now.
        ans: the resulting expressions in this particular recursion.
        ignored: number of parenthesis ignored in this particular recursion.
    """
    def remaining(self, string, index, left_count, right_count, expr, rem_count):
        # If we have reached the end of string
        if index == len(string):
            if left_count == right_count:
                if rem_count <= self.min_removed:
                    possible_ans = "".join(expr)
                    
                    if rem_count < self.min_removed:
                        self.valid_expressions = set()
                        self.min_removed = rem_count
                    
                    self.valid_expressions.add(possible_ans)
        else:
            current_char = string[index]
            
            if current_char != '(' and current_char != ')':
                expr.append(current_char)
                self.remaining(string, index + 1, left_count, right_count, expr, rem_count)
                expr.pop()
            else:
                self.remaining(string, index + 1, left_count, right_count, expr, rem_count + 1)
                expr.append(current_char)
                
                if string[index] == '(':
                    self.remaining(string, index + 1, left_count + 1, right_count, expr, rem_count)
                elif right_count < left_count:
                    self.remaining(string, index + 1, left_count, right_count + 1, expr, rem_count)
                
                expr.pop()
        
    def removeInvalidParentheses(self, s: str) -> List[str]:
        self.reset()
        
        self.remaining(s, 0, 0, 0, [], 0)
        return list(self.valid_expressions)
        
# method two: pruning method
class Solution:
    def removeInvalidParentheses(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        
        left = 0
        right = 0
        
        # First, we find out the number of misplaced left and right parentheses
        for char in s:
            
            # Simply record the left one
            if char == '(':
                left += 1
            elif char == ')':
                # If we don't have a matching left, then this is a misplaced right, record it.
                right = right + 1 if left == 0 else right
                
                # Decrement count of left parenthesis because we have found a right.
                # Which CAN be a matching one for a left
                left = left - 1 if left > 0 else left
                
        result = {}
        def recurse(s, index, left_count, right_count, left_rem, right_rem, expr):
            if index == len(s):
                if left_rem == 0 and right_rem == 0:
                    ans = "".join(expr)
                    result[ans] = 1
            else:
                # The discard case. Note that here we have our pruning condition.
                # We don't recurse if the remaining count for that parenthesis is == 0.
                if (s[index] == '(' and left_rem > 0) or (s[index] == ')' and right_rem > 0):
                    recurse(s, 
                            index + 1, 
                            left_count, 
                            right_count, 
                            left_rem - (s[index] == '('),
                            right_rem - (s[index] == ')'), 
                            expr)
                expr.append(s[index])
                
                if s[index] != '(' and s[index] != ')':
                    recurse(s, index + 1, left_count, right_count, left_rem, right_rem, expr)   
                elif s[index] == '(':
                    recurse(s, index + 1, left_count + 1, right_count, left_rem, right_rem, expr)
                elif s[index] == ')' and left_count > right_count:
                    recurse(s, index + 1, left_count, right_count + 1, left_rem, right_rem, expr)
                
                expr.pop()
        
        # Now, the left and right variables tell us the number of misplaced left and 
        # right parenthesis and that greatlt help pruning the recursion.
        recurse(s, 0, 0, 0, left, right, [])
        return list(result.keys())
