Solutions:

1.

class Solution:
    def totalNQueens(self, n):
        """
        :type n: int
        :rtype: int
        """
        def DFS(queens, xy_dif, xy_sum):
            p = len(queens)
            if p == n:
                result.append(queens)
                return None
            for q in range(n):
                if q not in queens and p - q not in xy_dif and p + q not in xy_sum:
                    DFS(queens + [q], xy_dif + [p - q], xy_sum + [p + q])
        result = []
        DFS([], [], [])
        return len(result)

2. 位运算

class Solution:
    def totalNQueens(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n < 1: return []
        self.count = 0
        self.DFS(n, 0, 0, 0, 0)
        return self.count
    
    def DFS(self, n, row, cols, pie, na):
        # recursion terminator
        if row >= n:
            self.count += 1
            return
        
        bits = (~(cols | pie | na)) & ((1 << n) - 1) #得到当前所有的空位
        
        while bits:
            p = bits & -bits # 取到最低位的1
            self.DFS(n, row + 1, cols | p, (pie | p) << 1, (na | p) >> 1)
            bits = bits & (bits - 1) # 去掉最低位的1
            
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
