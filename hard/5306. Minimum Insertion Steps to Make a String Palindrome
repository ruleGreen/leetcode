class Solution {
public:
    int minInsertions(string s) {
        int n = s.size();
        /*
        vector<int> v(255);
        for (int i = 0; i < n; ++ i)
            v[s[i]].push_back(i);
            */
        const int INF = 1000000000;
        vector<vector<int>> f(n, vector<int>(n));
        for (int i = n-1; i >= 0; -- i)
        {
            f[i][i] = 0;
            for (int j = i+1; j < n; ++ j)
            {
                if (s[i] == s[j])
                    f[i][j] = f[i+1][j-1];
                else
                {
                    f[i][j] = min(f[i+1][j], f[i][j-1])+1;
                }
            }
        }
        return f[0][n-1];
    }
};


class Solution(object):
    def minInsertions(self, str1):
        """
        :type s: str
        :rtype: int
        """
        n = len(str1)
        table = [[0 for i in range(n)]  
                    for i in range(n)] 
        l, h, gap = 0, 0, 0

        # Fill the table 
        for gap in range(1, n): 
            l = 0
            for h in range(gap, n): 
                if str1[l] == str1[h]: 
                    table[l][h] = table[l + 1][h - 1] 
                else: 
                    table[l][h] = (min(table[l][h - 1],  
                                       table[l + 1][h]) + 1) 
                l += 1

        # Return minimum number of insertions  
        # for str1[0..n-1] 
        return table[0][n - 1]
        
