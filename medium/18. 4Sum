class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        # brute force -> Time Limit Exceeded
        res = []
        for i in range(len(nums) - 3):
            for j in range(i + 1, len(nums) - 2):
                for z in range(j + 1, len(nums) - 1):
                    value = target - nums[i] - nums[j] - nums[z]
                    if value in nums[z+1:]:
                        result = sorted([nums[i], nums[j], nums[z], value])
                        if result not in res:
                            res.append(result)
        return res
        
        
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        # method one
        res = []
        for i in range(len(nums)):
            value = nums.pop(i)
            tmp = self.threeSum(nums, target - value)
            for i in range(len(tmp)):
                tmp[i].append(value)
                tmp[i].sort()
                if tmp[i] not in res:
                    res.append(tmp[i])
            nums.insert(i, value)
            
        return res
    
    def threeSum(self, nums, target):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        res = []
        nums.sort()
        # print(nums)
        for i in range(len(nums)-2):
            if i > 0 and nums[i] == nums[i-1]:  # 过滤重复的
                continue
            l, r = i+1, len(nums)-1
            while l < r:
                #print(i,l,r)
                s = nums[i] + nums[l] + nums[r]
                if s < target: l+=1
                elif s > target: r-=1
                else:
                    res.append([nums[i],nums[l],nums[r]])
                    while l < r and nums[l]==nums[l+1]:
                        l += 1
                    while l < r and nums[r]==nums[r-1]:
                        r -= 1
                    l += 1 ; r-= 1
        return res
