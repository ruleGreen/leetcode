1.

class Solution {
private:
    // memo[i][c]表示使用索引为[0...i]的这些元素，是否可以完全填充一个容量为c的背包
    // -1表示未计算，0表示不可以填充，1表示可以填充
    vector<vector<int>> memo;
    
    // 使用nums[0...index]，是否可以完全填充一个容量为sum的背包
    bool tryPartition(vector<int>& nums, int index, int sum){
        if(sum == 0)
            return true;
        
        if(sum < 0 || index < 0)
            return false;
        
        if(memo[index][sum] != -1)
            return memo[index][sum] == 1;
        
        memo[index][sum] = tryPartition(nums, index-1, sum) || tryPartition(nums, index-1, sum-nums[index]);
        return memo[index][sum] == 1;
        
    }    
public:
    
    // 典型的背包问题，在n个物品中选取一定的物品，填满sum/2的背包
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        for( int i = 0; i < nums.size(); i++){
            assert( nums[i] > 0);
            sum += nums[i];
        }
        
        if( sum%2 != 0)
            return false;
        
        memo = vector<vector<int>>( nums.size(), vector<int>(sum/2+1, -1));
        return tryPartition(nums, nums.size()-1, sum/2);
    }
};
