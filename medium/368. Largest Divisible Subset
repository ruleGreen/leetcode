Time Limit Exceed

class Solution:
    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
        
        # produce combination
        combina = [[]]
        for i in range(len(nums)):
            new = []
            for j in combina:
                flag = 0
                for p in range(len(j)):
                    if not (j[p] % nums[i] == 0 or nums[i] % j[p] == 0):
                        flag = 1
                if flag == 0:
                    new.extend([j + [nums[i]]])
            # print("new", new)
            combina += new
        
        combina = sorted(combina, key = lambda x:len(x), reverse = True)
        return combina[0]


class Solution(object):
    def largestDivisibleSubset(self, nums):
        nums.sort()
        
        combina = [[]]
        for i in range(len(nums)):
            combina += [j + [nums[i]] for j in combina if (len(j) > 0 and nums[i] % j[-1] == 0) or len(j) == 0]
        
        return sorted(combina, key = lambda x:len(x), reverse = True)[0]


class Solution(object):
    def largestDivisibleSubset(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        from copy import copy
        nums.sort()
        n = len(nums)
        if n == 0: return []
        dp = [0] * n
        dp[0] = [nums[0]]
        #print(dp)
        for i in xrange(1, n):
            curNum = nums[i]
            maxSet = []
            for j in xrange(i):
                if curNum % nums[j] == 0:
                    localSet = copy(dp[j])
                    if len(localSet) > len(maxSet):
                        maxSet = localSet
            
            maxSet.append(nums[i])
            dp[i] = maxSet
            #print(dp)
        
        #print(dp)
        res = []
        for localSet in dp:
            if len(localSet) > len(res):
                res = localSet
        return res
