class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        # dfs 
        self.res = list()
        if endWord not in wordList:
            return 0
        
        
        def judge(begin, end):
            count = 0
            
            if len(begin) != len(end):
                return False
            
            for i in range(len(begin)):
                if begin[i] != end[i]:
                    count += 1
            
            return True if count == 1 else False
                    
        
        def dfs(begin, end, dictionary, curr):
            if judge(begin, end):
                self.res.append(curr+1)
            
            # get cands
            cands = list()
            for i in range(len(dictionary)):
                if judge(begin, dictionary[i]):
                    cands.append(dictionary[i])
            
            filter_dict = []
            for i in range(len(dictionary)):
                if dictionary[i] not in cands:
                    filter_dict.append(dictionary[i])
            
            for i in range(len(cands)):
                dfs(cands[i], end, filter_dict, curr + 1)
        
        dfs(beginWord, endWord, wordList, 1)
            
        
        return min(self.res) if self.res else 0
        
        
class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        # dfs 
        self.res = list()
        if endWord not in wordList or not endWord or not beginWord or not wordList:
            return 0

        # Since all words are of same length.
        L = len(beginWord)

        # Dictionary to hold combination of words that can be formed,
        # from any given word. By changing one letter at a time.
        all_combo_dict = defaultdict(list)
        for word in wordList:
            for i in range(L):
                # Key is the generic word
                # Value is a list of words which have the same intermediate generic word.
                all_combo_dict[word[:i] + "*" + word[i+1:]].append(word)
                
         # Queue for BFS
        queue = collections.deque([(beginWord, 1)])
        # Visited to make sure we don't repeat processing same word.
        visited = {beginWord: True}
        while queue:
            current_word, level = queue.popleft()      
            for i in range(L):
                # Intermediate words for current word
                intermediate_word = current_word[:i] + "*" + current_word[i+1:]

                # Next states are all the words which share the same intermediate state.
                for word in all_combo_dict[intermediate_word]:
                    # If at any point if we find what we are looking for
                    # i.e. the end word - we can return with the answer.
                    if word == endWord:
                        return level + 1
                    # Otherwise, add it to the BFS Queue. Also mark it visited
                    if word not in visited:
                        visited[word] = True
                        queue.append((word, level + 1))
                all_combo_dict[intermediate_word] = []
        return 0
