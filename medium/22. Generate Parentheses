Python

class Solution:
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        self.list = []
        self._gen(0,0,n,"")
        return self.list
    
    def _gen(self, left, right, n, result):
        if left == n and right == n:
            self.list.append(result)
            return
        if left < n:
            self._gen(left + 1, right, n, result + "(")
        if left > right and right < n:
            self._gen(left, right + 1, n, result + ")")
            
        
Java


class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<String>();
        generateOnebyOne("", result, n, n);
        return result;
    }
    
    public void generateOnebyOne(String sublist, List<String> result, int left, int right){
        if (left == 0 && right ==0){
            result.add(sublist);
            return;
        }
        if (left > 0){
            generateOnebyOne(sublist + "(", result, left - 1, right);
        }
        if (right > left){
            generateOnebyOne(sublist + ")", result, left, right - 1);
        }
    }
}
