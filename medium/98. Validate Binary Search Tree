Questions.

Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Solution.

1.

class Solution:
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        inorder= self.inorder(root)
        return inorder == list(sorted(set(inorder)))
        
    def inorder(self,root):
        if root is None:
            return []
        return self.inorder(root.left) + [root.val] + self.inorder(root.right)
        
2.

class Solution:
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        self.prev = None
        return self.helper(root)
    
    def helper(self,root):
        if root is None:
            return True
        if not self.helper(root.left):
            return False
        if self.prev and self.prev.val >= root.val:
            return False
        self.prev = root
        return self.helper(root.right)
        
 3.
 
def isValidBST(self, root):
    res, self.flag = [], True
    self.helper(root, res)
    return self.flag
    
def helper(self, root, res):
    if root:
        self.helper(root.left, res)
        if res and root.val <= res[-1]:
            self.flag = False
            return
        res.append(root.val)
        self.helper(root.right, res)
 
        
