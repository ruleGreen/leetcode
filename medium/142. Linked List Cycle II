# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        fast, slow = head, head
        
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next  
            if fast == slow:
                meet = slow
                break
        
        if not fast or fast.next is None:
            return None
        
        new, pos = head, 0
        
        while new and meet:
            if new == meet:
                return meet
            
            new = new.next
            meet = meet.next
            
            pos += 1
