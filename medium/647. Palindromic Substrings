class Solution:
    def countSubstrings(self, s: str) -> int:
        # method one recursion
        # method three brute force
        count = 0
        for i in range(0, len(s)):
            for j in range(i, len(s)):
                # print(s[i:j+1])
                if self.isPalindromic(s[i:j+1]):
                    count += 1
        return count
        # method two dp
        
    
    def isPalindromic(self, string):
        if len(string) == 1:
            return True
        for i in range(0, len(string) // 2):
            if string[i] != string[- (i + 1)]:
                return False
        return True
    
    
    
class Solution(object):
    def countSubstrings(self, S):
        # 以每一个S里面的元素作为palindromic的中心点进行扩散
        N = len(S)
        ans = 0
        for center in range(2*N - 1):
            print("center1", center)
            left = center // 2
            right = left + center % 2
            print("left and right", left, right)
            while left >= 0 and right < N and S[left] == S[right]:
                # print("CENTER", center, "LEFT AND RIGHT", S[left], S[right])
                ans += 1
                left -= 1
                right += 1
        return ans
    
    
