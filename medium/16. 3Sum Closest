class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()                  # sort nums to perform two pointers
        result = sum(nums[:3])       # initial sum
        numsLen = len(nums)
        diff = abs(result - target)  # initial diff

        for i in range(numsLen):
            left, right = i + 1, numsLen - 1

            while left < right:
                total = nums[i] + nums[left] + nums[right]
                curDiff = abs(total - target)

                # compare previous diff and current diff
                # if current diff is smaller, update previous diff
                # and result to current diff and result
                if curDiff < diff:
                    diff = curDiff
                    result = total

                if total < target:   # move left pointer rightward for larger val
                    left += 1
                elif total > target: # move right pointer leftward for smaller val
                    right -= 1
                else:                # if total == target, we can directly return
                    return result

        return result
        
