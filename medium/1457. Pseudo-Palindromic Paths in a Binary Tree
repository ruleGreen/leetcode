# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pseudoPalindromicPaths (self, root: TreeNode) -> int:
        def dfs(node, cur):
            if not node: return 0
            cur.remove(node.val) if node.val in cur else cur.add(node.val)
            res = 0
            if not node.left and not node.right:
                if len(cur) <= 1: res = 1
            else:
                res = res + dfs(node.left, cur) + dfs(node.right, cur)
            # print("cur", cur)
            cur.remove(node.val) if node.val in cur else cur.add(node.val)  # re store value of before node
            # print(res, cur)
            return res
        
        return dfs(root, set())


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int pseudoPalindromicPaths (TreeNode root) {
        return canBePalindrome(root, new HashSet());
    }
    
    private int canBePalindrome(TreeNode node, Set<Integer> numbers) {
        if (node == null) return 0;
        if (numbers.contains(node.val)) {
            numbers.remove(node.val);
        } else {
            numbers.add(node.val);
        }
        
        if (node.left == null && node.right == null) {
            return numbers.size() <= 1 ? 1 : 0;
        }
        
        int left = canBePalindrome(node.left, new HashSet(numbers));
        int right = canBePalindrome(node.right, new HashSet(numbers));
        return left + right;
    }
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int result = 0;
    public int pseudoPalindromicPaths (TreeNode root) {
        int [] map = new int[10];
        findPalindrome(root, map);
        return result;
    }
    
    void findPalindrome(TreeNode root, int[] map) {
        if (root == null) {
            return;
        }
        
        map[root.val] = map[root.val] + 1;
        if (root.left == null && root.right == null) {
            if (isPalindrome(map))
                result++;
        }
        
        findPalindrome(root.left, map);
        findPalindrome(root.right, map);
        map[root.val] = map[root.val] - 1;
    
    }
    
    boolean isPalindrome(int[] map) {
        int miss = 0;
        for (int i=0; i<=9; i++) {
            if (map[i] % 2 != 0)
                miss++;
            if (miss>1) 
                return false;
        }
        return true;
    }
}
