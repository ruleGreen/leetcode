1. Time Limit Exceed

class Solution:
    def minAreaRect(self, points: List[List[int]]) -> int:
        # brute force
        points = sorted(points, key = lambda x: (x[0], x[1]))
        x = sorted(set([points[i][0] for i in range(len(points))]))
        y = sorted(set([points[i][1] for i in range(len(points))]))
        
        point, area = 0, float("inf")
        for i in range(len(x) - 1): #从x轴开始遍历
            current = []
            
            while x[i] == points[point][0]:
                current.append(points[point])
                point += 1
            
            # print(current)
            
            for j in range(len(current) - 1):
                for z in range(j + 1, len(current)):
                    point_x = current[j]
                    point_y = current[z]
                    
                    # print(point_x, point_y)
                    
                    for p in range(i+1, len(x)):
                        if [x[p], point_x[1]] in points and [x[p], point_y[1]] in points:
                            area = min(area, (x[p] - x[i]) * (point_y[1] - point_x[1]))
                            break
                            
        if area == float("inf"):
            return 0
        
        return area
        
 class Solution:
    def minAreaRect(self, points: List[List[int]]) -> int:
        # method one
        columns = collections.defaultdict(list)
        for x, y in points:
            columns[x].append(y)
        lastx = {} # this is very important {(y1, y2): x}
        ans = float('inf')
        
        for x in sorted(columns):
            column = columns[x]
            # print(type(column), column)
            column.sort()
            print(column)
            # 这一块写的很巧妙
            for j, y2 in enumerate(column):
                for i in range(j):
                    y1 = column[i]
                    print(y1, y2)
                    if (y1, y2) in lastx:
                        ans = min(ans, (x - lastx[y1, y2]) * (y2 - y1))
                    lastx[y1, y2] = x
            print(lastx)
        return ans if ans < float('inf') else 0
