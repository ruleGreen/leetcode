
Question:

Given 1->2->3->4, you should return the list as 2->1->4->3.

Solution:

1.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def swapPairs(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        pre, pre.next = self,head
        while pre.next and pre.next.next:
            a = pre.next
            b = a.next
            # a,b,b.next = b,b.next,a # a,b are temporary variable
            pre.next,a.next,b.next = b,b.next,a
            pre = a
        return self.next
    
# 1->2->3->4  => 2->3—>1->4 => 2->1->4->3

2.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def swapPairs(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head is None or head.next is None:
            return head
        headOfRest=head.next.next
        head,head.next=head.next,head
        head.next.next=self.swapPairs(headOfRest)
        return head
        
 3

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        // 创建一个新的头结点 辅助
        ListNode* dummyHead = new ListNode(0);
        dummyHead->next = head;
        
        ListNode* p = dummyHead;
        while(p->next && p->next->next){
            ListNode* node1 = p->next;
            ListNode* node2 = node1->next;
            ListNode* next = node2->next;
            
            node2->next = node1;
            node1->next = next;
            p->next = node2;
            
            p = node1;
        }
        
        ListNode* retNode = dummyHead->next;
        delete dummyHead;
        
        return retNode;
    }
};
