class Solution:
    def search(self, nums: List[int], target: int) -> int:
        # 变种的二分查找问题
        if len(nums) == 0 or target is None:
            return -1
        
        l, r = 0, len(nums) - 1
        while l <= r:
            mid = l + ((r - l) >> 1)  # Notice: the priority of operation
            if l == r and nums[l] != target:
                return -1
            if nums[mid] == target:
                return mid
            
            if nums[r] >= nums[mid] >= nums[l]:
                # simple binary search 
                if nums[mid] <= target:
                    l = mid + 1
                else:
                    r = mid - 1
            elif nums[mid] >= nums[l]:
                # mid point at first ascending list
                if nums[mid] >= target and target >= nums[l]:
                    r = mid - 1
                else:
                    l = mid + 1
            elif nums[mid] <= nums[r]:
                if target >= nums[mid] and target <= nums[r]:
                    l = mid + 1
                else:
                    r = mid - 1
        
        return -1
