1. method one: brute force  100/101 test cases passed

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        if len(strs) == 0 or strs is None:
            return [[]]
        
        res, flag = [], 0 
        
        for i in range(len(strs)):
            s = sorted(strs[i])
            for j in range(len(res)):
                current = sorted(res[j][0])
                if current == s:
                    flag = 1
                    res[j].append(strs[i])
                    break
            if flag == 0:
                res.append([strs[i]])
            flag = 0
                    
        return res
        
        
2. hash function

3. Using tuple (count) or count(sorted(strs[i])) as key and collections.defaultdict

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        if len(strs) == 0 or strs is None:
            return [[]]
        
        ans = collections.defaultdict(list)
        for s in strs:
            ans[tuple(sorted(s))].append(s)
        return ans.values()
        
        
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        if len(strs) == 0 or strs is None:
            return [[]]
        
        ans = collections.defaultdict(list)
        for s in strs:
            count = [0] * 26
            for c in s:
                count[ord(c) - ord('a')] += 1
            ans[tuple(count)].append(s)
        return ans.values()    
