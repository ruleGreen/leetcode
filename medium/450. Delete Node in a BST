# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:
        # returns replacement for the target node
        # the caller of "replace(node)"" is always
        # this node's parent.left or parent.right
        def replace(node):
            n = node
            # if the target node has two child
            if node.right and node.left:
                # we only move right once, then we only move left
                # to find the target's successor
                node = node.right
                # if target's right child doesn't have left child
                # replace target node directly with this right child
                # and also set this right child's new left to the 
                # target's original left child
                if not node.left:
                    node.left = n.left
                    return node
                # if target's right child has left child, we keep going
                # left until there's no left, now we have variable 
                # parent as the leftmost child's, aka successor,
                # immediate parent, if this leftmost child has a right
                # child node.right, give it to its parent.left=node.right
                # and replace target node's value to this successor's 
                # value, return the original target node.
                while node.left:
                    parent = node
                    node = node.left
                parent.left = node.right
                n.val = node.val
                return n
            # if it only have one child, replace directly with child 
            elif node.right:
                return node.right
            elif node.left:
                return node.left
            # if node has no child, simply delete it by returning None
            # to its parent
            else:
                return None
            
        if not root: return None
        if root.val == key:
            return replace(root)
        r = root
        while r:
            # if current r has a left child and it's the target
            # call replace function and replace r's left child
            # return original tree root
            if r.left and r.left.val == key:
                r.left = replace(r.left)
                return root
            # case when r's right child is target
            elif r.right and r.right.val == key:
                r.right = replace(r.right)
                return root
            # if neither child is target, do tree walk as usual
            if r.val < key:
                r = r.right
            else:
                r = r.left
        return root
