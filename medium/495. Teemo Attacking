class Solution:
    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:
        if len(timeSeries) == 0 or duration == 0:
            return 0
        
        res, start, current, end = 0, 0, 0, 0
        for i in range(len(timeSeries)):
            current = timeSeries[i]
            if current <= end:
                end = current + duration - 1
            else:
                if start != 0:
                    res += end - start + 1
                elif start == 0 and timeSeries[0] == 0:
                    res += end - start + 1
                start = current
                end = current + duration - 1
        
        res += end - start + 1
        
        return res 
        
        
class Solution:
    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:
        n = len(timeSeries)
        if n == 0:
            return 0
        
        total = 0
        for i in range(n - 1):
            total += min(timeSeries[i + 1] - timeSeries[i], duration)
        return total + duration
