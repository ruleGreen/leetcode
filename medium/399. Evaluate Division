# runtime error

class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        
        # down up -> 分母 分子
        down = [char[1] for char in equations]
        up = [char[0] for char in equations]
        
        
        def f(a, b, memo):
            string = a + b
            if string in memo:
                return memo[string]
            else:
                if b not in down and b not in up:
                    print("down up", down, up)
                    value = - 1.0
                else:
                    # a -> equations[i][0]
                    # b -> equations[i][1]
                    for i in range(len(equations)):
                        if b == equations[i][1]:
                            value = f(a, equations[i][0], memo) * memo[equations[i][0] + equations[i][1]]
                            if f(a, equations[i][0], memo) == - 1.0:
                                value = - 1.0
                        elif b == equations[i][0]:
                            value = f(a, equations[i][1], memo) / memo[equations[i][0] + equations[i][1]]
                            if f(a, equations[i][1], memo) == - 1.0:
                                value = - 1.0
            memo[string] = value
            return value
        
        print(down, up)
        
        # init memo
        memo = {}
        for i in range(len(equations)):
            memo[equations[i][0] + equations[i][1]] = values[i]
            memo[equations[i][1] + equations[i][0]] = 1 / values[i]
            memo[equations[i][0] + equations[i][0]] = 1.0
            memo[equations[i][1] + equations[i][1]] = 1.0
        
        # compute query
        res = []
        for j in range(len(queries)):
            res.append(f(queries[j][0], queries[j][1], memo))
        
        return res
  
  
2. method two
  
class Solution:
    def calcEquation(self, equations, values, queries):
        quot = collections.defaultdict(dict)
        for (num, den), val in zip(equations, values):
            quot[num][num] = quot[den][den] = 1.0
            quot[num][den] = val
            quot[den][num] = 1 / val
        for k in quot:
            for i in quot[k]:
                for j in quot[k]:
                    quot[i][j] = quot[i][k] * quot[k][j]
        return [quot[num].get(den, -1.0) for num, den in queries]
        
3. method three: build graph to solve this problem

class Solution(object):
    def calcEquation(self, equations, values, queries):

        graph = {}
        
        def build_graph(equations, values):
            def add_edge(f, t, value):
                if f in graph:
                    graph[f].append((t, value))
                else:
                    graph[f] = [(t, value)]
            
            for vertices, value in zip(equations, values):
                f, t = vertices
                add_edge(f, t, value)
                add_edge(t, f, 1/value)
        
        def find_path(query):
            b, e = query
            
            print("b: {}, e: {}".format(b, e))
            if b not in graph or e not in graph:
                return -1.0
                
            q = collections.deque([(b, 1.0)])
            visited = set()
            
            while q:
                front, cur_product = q.popleft()
                print("front: {}, cur_prodcut: {}".format(front, cur_product))
                if front == e:
                    return cur_product
                visited.add(front)
                for neighbor, value in graph[front]:
                    if neighbor not in visited:
                        q.append((neighbor, cur_product*value))
            
            return -1.0
        
        build_graph(equations, values)
        return [find_path(q) for q in queries]
