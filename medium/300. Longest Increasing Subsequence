class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums == null || nums.length == 0){
            return 0;
        }
        
        int res = 1;
        int[] dp = new int[nums.length + 1];
        
        for(int i = 0; i < nums.length; ++i) dp[i] = 1;
        
        for(int i = 1; i < nums.length; ++i){
            for(int j = 0; j < i; ++j){
                if(nums[j] < nums[i]){
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            res = Math.max(res, dp[i]);
        }
        return res;
    }
}


class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> res;
        for(int i = 0; i < nums.size(); i++){
            auto it = std::lower_bound(res.begin(), res.end(), nums[i]);
            if(it == res.end())
                res.push_back(nums[i]);
            else *it = nums[i];
        }
        return res.size();
    }
};

3.

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        if( nums.size() == 0)
            return 0;
        
        // memo[i] 表示以nums[i]结尾的最长上升子序列的长度
        vector<int> memo(nums.size(), 1);
        for(int i = 1; i < nums.size(); i++)
            for(int j = 0; j < i; j++)
                if( nums[j] < nums[i])
                    memo[i] = max(memo[i], 1 + memo[j]);
        
        int res = 1;
        for(int i = 0; i < nums.size(); i++)
            res = max(res, memo[i]);
        
        return res;
    }
};
