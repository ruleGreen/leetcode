# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def balanceBST(self, root: TreeNode) -> TreeNode:
        
        self.res = []
        self.traverse(root)
        
        self.res = sorted(self.res)
        result = self.buildBalancedTree(self.res)
        
        return result
    
    def traverse(self, root):
        if root:
            self.res.append(root.val)
            self.traverse(root.left)
            self.traverse(root.right)
    
    def buildBalancedTree(self, cands):
        if not cands:
            return 
        result = TreeNode(cands[len(cands) // 2])
        result.left = self.buildBalancedTree(cands[:len(cands) // 2])
        result.right = self.buildBalancedTree(cands[len(cands) // 2 + 1:])
        return result
            
        
